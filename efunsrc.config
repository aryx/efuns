 add_amount = 200
 efuns_path = ""
 width = 80
 height = 25
 font = fixed
 foreground = white
 background = black
 save_buffer_hooks = []
 saved_buffer_hooks = [
  update_time]
 change_buffer_hooks = [
  check_file]
 menus = []
 file_menu = [
  ("Open File", select_open_file);
  ("Save Buffer", save_buffer);
  ("Kill Buffer", kill_buffer);
  (Compile, compile);
  ("", "");
  (Quit, exit)]
 edit_menu = [
  (Cut, kill_region);
  (Paste, insert_killed);
  (Undo, undo);
  ("", "");
  ("Cut Frame", v_cut_frame);
  ("One Frame", one_frame);
  ("Delete Frame", delete_frame)]
 avoid_filenames = [
  ".*\\.o";
  ".*\\.cm.";
  ".*\\.cmxa";
  ".*~";
  ".*\\.a";
  core;
  "\\..*"]
 fill_line_len = 80
 fill_on_char = " "
 global_map = [
  (("C-?", "C-?"), load_buffer);
  (("C-?", "?"), insert_file);
  (("?"), move_backward);
  (("?"), move_forward);
  (("C-?"), move_backward);
  (("C-?"), move_forward);
  (("C-?"), backward_word);
  (("C-?"), forward_word);
  (("M-?"), backward_word);
  (("M-?"), forward_word);
  (("C-?"), beginning_of_line);
  (("C-?"), end_of_line);
  (("?"), "backward-line");
  (("?"), forward_line);
  (("C-?"), backward_paragraph);
  (("C-?"), forward_paragraph);
  (("?"), backward_screen);
  (("?"), forward_screen);
  (("C-?"), end_of_file);
  (("C-?"), begin_of_file);
  (("?"), insert_return);
  (("?"), delete_before_point);
  (("C-?"), delete_at_point);
  (("?"), delete_at_point);
  (("M-?"), delete_forward_word);
  (("M-?"), delete_backward_word);
  (("C-?"), hungry_electric_delete);
  (("C-?"), kill_end_of_line);
  (("C-?"), mark_at_point);
  (("C-?"), kill_region);
  (("C-?"), insert_killed);
  (("M-?"), insert_next_killed);
  (("C-?"), transpose_chars);
  (("M-?"), transpose_words);
  (("M-?"), lowercase_word);
  (("M-?"), uppercase_word);
  (("M-?"), fill_paragraph);
  (("M-?"), query_replace_string);
  (("C-?"), isearch_forward);
  (("C-?"), isearch_backward);
  (("M-?"), isearch_forward_regexp);
  (("M-?"), isearch_backward_regexp);
  (("C-?"), undo);
  (("M-?"), shell_command);
  (("C-?", "?"), change_buffer);
  (("C-?", "?"), kill_buffer);
  (("CM-?"), left_buffer);
  (("CM-?"), right_buffer);
  (("CM-?"), down_buffer);
  (("CM-?"), up_buffer);
  (("C-?", "?"), vertical_cut_frame);
  (("C-?", "?"), horizontal_cut_frame);
  (("C-?", "?"), one_frame);
  (("C-?", "?"), delete_frame);
  (("C-?", "?"), next_frame);
  (("M-?"), call_interactive);
  (("C-?", "C-?"), save_buffer);
  (("C-?", "?"), save_some_buffers);
  (("C-?", "C-?"), write_file);
  (("?"), overwrite_mode);
  (("C-?"), recenter);
  (("C-?", "?"), change_font);
  (("C-?", "C-?"), point_at_mark);
  (("C-?", "?"), next_hole);
  (("C-?", "?", "?"), window_load_buffer);
  (("C-?", "?", "?"), window_change_buffer);
  (("C-?", "?", "?"), delete_window);
  (("C-?", "?"), help_bindings);
  (("C-?", "C-?"), exit);
  (("C-?", "?"), next_error);
  (("?"), char_expand_abbrev);
  (("M-?"), dabbrev_expand)]
 interactives_map = [
  (save_options, save_options);
  (load_library, load_library);
  (get_position, get_position);
  (open_display, open_display);
  (unset_attr, unset_attr);
  (start_server, start_server);
  (goto_char, goto_char);
  (goto_line, goto_line);
  (replace_string, replace_string);
  (replace_regexp, replace_regexp);
  (query_replace_string, query_replace_string);
  (query_replace_regexp, query_replace_regexp);
  (fondamental_mode, fondamental_mode);
  (compile, compile);
  (grep, grep);
  (eval, eval);
  (makefile_mode, makefile_mode);
  (ocaml_mode, ocaml_mode);
  (tex_mode, tex_mode);
  (c_mode, c_mode);
  (paren_mode, paren_mode);
  (abbrevs_mode, abbrevs_mode);
  (accents_mode, accents_mode);
  (ocaml_minor_mode, ocaml_minor_mode);
  (fill_mode, fill_mode);
  (ocaml_compiler_mode, ocaml_compiler_mode);
  (tab_mode, tab_mode);
  (overwrite_mode, overwrite_mode)]
 highlight_color = cyan
 makefile_mode = {
   interactives_map = [
    (compile, "makefile_mode.compile");
    (color_buffer, "makefile_mode.color_buffer")]
   local_map = [
    (("C-?", "C-?"), "makefile_mode.compile");
    (("C-?"), "makefile_mode.color_buffer")]
   vars_color = blue
   target_color = cadetblue
   rules_color = red
}
 abbrevs_mode = {
   abbrevs_chars = " "
   abbrevs = []
}
 compil = {
   grep_command = "grep -n"
   make_command = "make -k"
   find_makefile = true
   error_regexp = "^\\([^:\n]+\\):\\([0-9]+\\):.*$"
}
