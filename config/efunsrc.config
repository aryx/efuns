 add_amount = 200
 efuns_path = ""
 font = "UbuntuMono Bold 22"
 save_buffer_hooks = []
 change_buffer_hooks = [
  buffer_menu_change_buffer_record;
  check_file]
 file_menu = [
  ("Open File", load_buffer);
  ("Save Buffer", save_buffer);
  ("Kill Buffer", kill_buffer);
  (Compile, compile);
  ("", "");
  (Quit, exit)]
 edit_menu = [
  (Cut, kill_region);
  (Paste, insert_killed);
  (Undo, undo);
  ("", "");
  ("Cut Frame", vertical_cut_frame);
  ("One Frame", one_frame);
  ("Delete Frame", delete_frame)]
 avoid_filenames = [
  ".*\\.o$";
  ".*\\.cm.$";
  ".*\\.cmxa$";
  ".*~";
  ".*\\.a$";
  "core$";
  "\\..*"]
 fill_line_len = 80
 fill_on_char = " "
 keyword_color = orange
 string_color = green3
 comment_color = gray
 number_color = yellow3
 punctuation_color = cyan
 operator_color = gold
 function_name_color = LightBlue2
 variable_name_color = LightBlue3
 type_color = palegreen
 module_color = DarkSlateGray4
 preprocessor_color = coral
 builtin_color = coral
 common_functions_color = Violet
 syncweb_comment_color = DimGray
 section_comment_color = MistyRose4
 error_color = red
 global_map = []
 width = 80
 height = 45
 foreground = wheat
 background = DarkSlateGray
 highlight_color = cyan
 tex_mode = {
   mode_regexp = [
    ".*\\.tex";
    ".*\\.cls";
    ".*\\.sty"]
   local_map = [
    (("C-c", "C-l"), "tex_mode.color_buffer");
    (("C-c", "C-c"), compile);
    (("C-c", "%"), "tex_mode.comment_region");
    (("C-c", "C-u", "%"), "tex_mode.uncomment_region");
    (("{"), "tex_mode.char_expand_abbrev");
    (("*"), "tex_mode.char_expand_abbrev");
    ((" "), "tex_mode.char_expand_abbrev");
    (("M-q"), fill_paragraph);
    ((Return), "tex_mode.insert_return");
    (("C-c", Return), "tex_mode.load_input_file");
    (("C-c", Right), "tex_mode.load_next_input_file");
    (("C-c", Left), "tex_mode.load_prev_input_file");
    (("C-c", Down), "tex_mode.set_main_file");
    (("C-c", Up), "tex_mode.to_main_file");
    (("}"), "tex_mode.find_matching_paren");
    (("]"), "tex_mode.find_matching_paren");
    ((")"), "tex_mode.find_matching_paren")]
   env_list = [
    array;
    eqnarray;
    figure]
   hooks = [
    accents_mode;
    fill_mode]
   syntax = "'-"
   warning_regexp = "^LaTeX Warning:.*line +\\([0-9]+\\)"
   error_regexp = "^l.\\([0-9]+\\)"
   structures = [
    (("C-c", 1), "\\section{^^}\n^^");
    (("C-c", 2), "\\subsection{^^}\n^^");
    (("C-c", 3), "\\subsubsection{^^}\n^^");
    (("C-c", "C-1"), "\\section*{^^}\n^^");
    (("C-c", "C-2"), "\\subsection*{^^}\n^^");
    (("C-c", "C-3"), "\\subsubsection*{^^}\n^^");
    (("C-c", e), "\\begin{^^}\n^^\n\\end{^^}\n^^");
    (("C-c", i), "\\begin{itemize}\n\\item ^^\n\\end{itemize}");
    (("C-c", v), "\\begin{verbatim}\n ^^\n\\end{verbatim}")]
   abbrevs = []
}
 c_mode = {
   local_map = []
   mode_regexp = [
    ".*\\.\\(c\\|cpp\\|cc\\|h\\|H\\|C\\|y\\|l\\)$"]
}
 ocaml_mode = {
   mode_regexp = [
    ".*\\.\\(ml\\|mli\\|mll\\|mly\\|mlp\\|mlg\\)$"]
   local_map = [
    (("."), "ocaml_mode.char_expand_abbrev");
    ((";"), "ocaml_mode.char_expand_abbrev")]
   hooks = [
    paren_mode]
   syntax = "_'"
   structures = [
    (("C-c", "'", b), "begin ^^ end^^");
    (("C-c", "'", f), "for ^^ to ^^ do\n^^");
    (("C-c", "'", w), "while ^^ do\n^^\ndone");
    (("C-c", "'", t), "try\n ^^ \nwith\n ^^");
    (("C-c", "'", m), "match ^^ with\n ^^");
    (("C-c", "'", i), "if ^^ then\n ^^\n else\n ^^");
    (("C-c", "'", l), "let ^^ = ^^ in\n ^^")]
   error_regexp = "File \"\\(.*\\)\", line \\([0-9]+\\), characters \\([0-9]+\\)[-]\\([0-9]*\\):"
   indentation = 2
   start_regexp = "^\\(let\\|module\\|type\\|exception\\|open\\)"
   abbrevs = [
    ("nl'", "print_newline ()");
    ("pr'i", print_int);
    ("to'p", "Printexc.to_string");
    ("pr'", "Printf.printf");
    ("spr'", "Printf.sprintf");
    ("fpr'", "Printf.fprintf");
    ("rev'l", "List.rev");
    ("ite'l", "List.iter");
    ("len'l", "List.length");
    ("lfol'l", "List.fold_left");
    ("rfol'l", "List.fold_right");
    ("map'l", "List.map");
    ("mem'l", "List.mem");
    ("memq'l", "List.memq");
    ("mass'l", "List.mem_assoc");
    ("assq'l", "List.assq");
    ("spl'l", "List.split");
    ("com'l", "List.combine");
    ("ite'a", "Array.iter");
    ("len'a", "Array.length");
    ("set'a", "Array.set");
    ("get'a", "Array.get");
    ("cre'a", "Array.create");
    ("ini'a", "Array.init");
    ("cop'a", "Array.copy");
    ("sub'a", "Array.sub");
    ("map'a", "Array.map");
    ("con'a", "Array.concat");
    ("ite'h", "Hashtbl.iter");
    ("fin'h", "Hashtbl.find");
    ("add'h", "Hashtbl.add");
    ("rem'h", "Hashtbl.remove");
    ("cre'h", "Hashtbl.create");
    ("cle'h", "Hashtbl.clear");
    ("ite'q", "Queue.iter");
    ("len'q", "Queue.length");
    ("cre'q", "Queue.create");
    ("add'q", "Queue.add");
    ("get'q", "Queue.take");
    ("tak'q", "Queue.take");
    ("cle'q", "Queue.clear");
    ("emp'q", "Queue.Empty");
    ("con'f", "Filename.concat");
    ("che'f", "Filename.check_suffix");
    ("cho'f", "Filename.chop_suffix");
    ("bas'f", "Filename.basename");
    ("dir'f", "Filename.dirname");
    ("len's", "String.length");
    ("set's", "String.set");
    ("get's", "String.get");
    ("cre's", "String.create");
    ("mak's", "String.make");
    ("sub's", "String.sub");
    ("cop's", "String.copy");
    ("bli's", "String.blit");
    ("con's", "String.concat");
    ("low's", "String.lowercase");
    ("upp's", "String.uppercase");
    ("cap's", "String.capitalize");
    ("unc's", "String.uncapitalize");
    ("upp'c", "Char.uppercase");
    ("low'c", "Char.lowercase");
    ("loc'm", "Mutex.lock");
    ("unl'm", "Mutex.unlock");
    ("cre'm", "Mutex.create");
    ("cre'c", "Condition.create");
    ("wai'c", "Condition.wait");
    ("cre't", "Thread.create");
    ("len'w", "Weak.length");
    ("set'w", "Weak.set");
    ("get'w", "Weak.get");
    ("a'", Array);
    ("c'", Char);
    ("d'", Digest);
    ("f'", Filename);
    ("h'", Hashtbl);
    ("l'", List);
    ("m'", Map);
    ("o'", Obj);
    ("p'", Printexc);
    ("q'", Queue);
    ("r'", Random);
    ("s'", String);
    ("t'", Thread);
    ("w'", Weak)]
   ocaml_path = ""
}
 makefile_mode = {
   local_map = [
    (("C-l"), "makefile_mode.color_buffer")]
   target_color = MediumAquamarine
   rules_color = orange
}
 abbrevs_mode = {
   abbrevs_chars = " "
   abbrevs = []
}
 compil = {
   grep_command = "grep -n"
   make_command = make
   find_makefile = true
   error_regexp = "^\\([^:\n]+\\):\\([0-9]+\\):.*$"
}
