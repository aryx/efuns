# -*- org -*-

* Last

*** M-% with ! to do replace all

** Last

*** apply-macro-to-region

*** query_replace_regexp return an exception on Str2.matched_str TODO

*** OPAM release now that opam-publish is pretty easy to use?

*** highlight C-s
first simple version, just the searched string

*** highlight marked region?

*** resume ocp_indent in efuns

*** ocamlmerlin has pbs with FOR_MERLIN/
some exns then when put this dir in .merlin for pfff

pb common.cmi ambiguity, can be fixed?

*** => OPAM release

** Current

*** bugs

**** still? when C-s and accidentally get touchpad to move to other place
then get second cursor and weird behavior

*** indentation

**** call ocp-indent? to indent_region?

**** reindent c_mode.ml!

**** also TAB and insert comment prefix star when inside a comment.

*** better org/outline mode

**** identify outline and level
^[*+]

**** API to delete/insert outline

**** move around outline

**** C-c C-x C-s to save archive

*** highlighting C-s
quite important in the end

*** more integration of merlin with efuns

**** use ocamlmerlin server to accelerate?
slowdown after use of FOR_MERLIN? too many .cmt?

**** prefill with prefix completion

**** M-x goto-def for functions, constants, etc.
not just modules

**** fuzzy search for entities! L.m -> List.map

**** indentation? by computing enclosing information?
Tab would be a command using a lot merlin
or use ocp-indent? see ocp-indent.el? can ask to indent just where
is the cursor?

**** show doc and/or type and/or def and/or interface when over ident after
1 sec!
ocaml_merlin thread?
same for error? show error after a few seconds of inactivity?

**** hover mouse show type or info or def content in hover window
need additional backend field

**** less: show type in other frame?
so can also colorize it!

*** -------------------------

*** M-% prefill with last default replace?

*** C-s C-w that continue with next word under cursor

*** generic M-x comment?

*** all_bindings(), interactive redesign part 4

*** clipboard and Xterm.get_cutbuffer, set_cutbuffer
merge! and make it work!

*** M-x calendar
just call the cal program?

*** -debug_keyboard?
where print every keystroke code?
can bind C-M-x under windows, thx to autokeys

*** efuns completion for noweb and TeX?
for \cite can look at .bbl
for \ref can look at label in files
etc.

*** FUN efuns completion for C!
use LSP protocol client format?

*** FUN efuns and pfff, fuzzy search, being more efficient than under emacs!
also minimap useful when reading gtd.org, code, latex
omnibar search!

* Features

** important (and not too long to implement)

*** paren_mode: show also when hover a paren

*** org: moving sections up and down
need helper function that find and mark sections

*** org: save and move to archive.org
C-c C-x C-s

*** org: maybe highlight the EASY in bigger size, the TODO

*** highlight C-s

*** highlight marked-region

*** ido-mode
when opening files, when M-x with big minibuffer
and arrows. Copy emacs and my .emacs

** important but can take a long time

*** multi-selection as in Sublime or Atom?
does what rectangle and macro do

*** cua, S-down, S-etc
and highlight

** small bugs but useful stuff

*** eshell: color_region, because color from scratch
starts to be expensive when have long eshell session
still true on fast surface book 2?

*** text: can't insert a Tab in a Makefile? C-q Tab does not work??

*** compile: maximize content display like for eshell, scroll_to_end
but rename this function though it's more scroll_to_display_more

*** compile: compile mode working for pfff -parse_xxx
so can C-n on the error

*** compile: C-n working for error message by clang

*** outline: if nothing matched at level x, then try level x+1 ?
helper function filter_matching_level?

*** C-y in replace query, handling multilines copy
so can factorize copyright chunks


*** eshell: still? eshell unstable M-1, switch cursor between 2 places

*** eshell: set loc_dirname?? why C-x C-f from eshell does not start
at right place?
still?

*** eshell: should start from dir of current frame
so can get multiple eshell window from same dir
still?

*** dired: when type enter to open a file, do not close dired,
so when do C-x k you go back to the place

*** compile: when compile window is not shown, use Top_window.message
to warn when command has finished?

*** eshell: do mv x1 x2 and then get a Broken pipe?

*** eshell: M-1 when have run a cmd is not "stable". Doing multiple
times M-1 should not move the cursor

*** noweb: 4 cols Tabs, better when edit plan9 .nw files

** less

*** a browser of previous point where you have been
I use a lot C-u space, but what about if you were doing
the "Expose" of pevious point exploration? Do full minimap
of file, maybe in multiple columns so can put more, and indicate
previous big jumps on it?

** small

*** small diffs with emacs
lots of different behaviors to fix,
e.g. C-g in minibuffer, second Tab in completion, Up/Down keeping bool,
C-x C-f and / should start display

**** C-x C-f listing is just 2 cols not sorted correctly,
use the same thing I did for eshell?

**** C-s that higlight the matched stuff, pretty useful
(could also do like in firefox where get a thumbnail of the match
in the scrollbar)

**** C-x C-f TAB C-g does not work

**** C-s C-w C-w

**** C-x k that prompt first?
or maybe better like this.
but at least if buffer was modified ask for save it before


** still? bench!
editing text is becoming really slow.
because of all those points? those asserts?
because of layout?

** new modes

*** later: project.ml
see atom, textmate, sublime, and also my project.el

so can have fuzzy file finder?
and fuzzy file search?
or do it based on graph_code.marshall?
and provide completion a la codemap!!

*** magit mode
complicated? but at least can be far faster than what I have?

but do not show the stash section in magit!

*** magit-blame!
actually does not work on my mac :)

** old modes

*** ocaml

**** less: lpize with ocaml support for globals, typed constants
also have arrays in ast? pfff -lpize split weird
when constant is an array

**** EASY Typedef Def -> Entity (Type, Def) !!
so better color for types in efuns and codemap

**** !!!! fix indent issues in tuareg mode, put 4 indent sick of it
do it in efuns!! finally!
use ocp-indent?

*** eshell

**** SEMI understand frm_y_offset and frm_x_offset in Frame.display()
=> can improve eshell?
=> can use make ... from eshell, finally

**** SEMI fix scroll_line to fix issues with overflow lines and eshell
or simply use right frm_start?
but still need to handle pb that you don't know how many lines
before because of the 80col thing

**** SEMI eshell: do not keep at center of the frame,
goto the end of the buffer
but need understand frm_y_offset

**** eshell: auto go to end when type anything

*** noweb

*** makefile

**** outline! and more colors for big sections
regexp = ****\n* [^\n]+\n****

*** mkfile?

** stuff not in emacs
More visual stuff where escape the terminal-compatibility barrier.
Some of the stuff are actually available as plugins (e.g. autocomplete),
 but they are complicated and so I might do a better job for myself.

*** SEMI minimap

**** mouse: click on it to scroll there

**** fix: when searching do not consider the minibuffer as the active frame

**** show searched highlights! on minimap! a la firefox!

*** visual align-guides like in atom
just do via overlay? after frm_table has been updated
just go through all frm_table and look if space?

*** clean utf-8
look at uemacs/utf8.c code?

It's in emacs, but it's not clean. It always confused me.

** stuff in emacs to port

*** later

**** visual beep (e.g. when incremental search done)

**** still? want incremental coloring! 
font-lock is complicated 
maybe look at his ancestor? hilit19?
just do after-modif-hook and try to colorize the whole buffer.

**** highlight when put mark

**** highlight parens when hover arounnd, show_paren mode so when cursor
around paren it shows the matching one
and make default mode?

**** cua mode, S-down

**** C-h k
and then the key.
may need a special thing though to do that.

**** less: widen/narrow
useful though when I work on Tex document, to keep focus

**** less: pad-make-indirect-buffer

**** less: configure event, recompute height and width
maybe clean background with darkslategray before

**** less: put name of current buffer in window title!
hook? as part of the backend?

**** try howdoi? or codesnippet?
https://github.com/gleitz/howdoi

*** misc

**** still? use realpath? so C-n does a better job?

** Internals

*** refactoring 

**** rewrite display to not have terminal backward compatibility
constraint. Simpler? Can do multi-fonts more easily?

**** less: remove windows C-n 5 ? init_frame

*** unit testing
too many bugs? time for some unit tests? at least to
avoid further regression whens refactoring code?

**** include ounit.ml and have a -test?

*** checking

**** add check for useless export, so can have even smaller .mli

*** bench
vs emacs, vs qemacs

**** can handle files of multi megabytes?
attr representation efficient?

**** startup time?

** misc

*** see my emacs-news.txt? see my .emacs?

* Ports

** less: try minimal port using OCaml Graphics?

** finish efuns port to plan9!
so can start to work under plan9!!! in a nice environment!!!
main issues: keyboard, run process and threads

*** keyboard: handling control-up, control-down, alt-xxx
KAlt|... KCtlAlt|... ?

*** keyboard: handle control-alt
need for C-Alt-Tab

*** can't run process, cat foo.txt does not work
need threads? use simply sigalarm for now? anyway I 
don't use any alarms right now

*** synchronize screen, got some flickering
use double buffer?

*** can't open Efuns.tex under efuns, it hangs
too big already?

*** ----------------------------

*** less: can't go back to regular window (e.g. by C-c C-x)
apparently ape/test_draw too (when I hit Tab).
Because use exit instead of exits?

einit? raw mode => complex?

actually diff between _exits and exits

*** later: bug in Gc.compact
was originally found when doing C-x C-k, it was crashing efuns under plan9 

*** less: when resize I lost the graphics window
also the case for /tests/draw

*** -debug_kbd

*** mk install should copy caml/*.h and with the right values

*** later: change os_type to "plan9" ?
so cleaner to adapt call to linker? need? plan9 looks mostly like
an unix


* Copy VsCode or Atom

** imitating: https://blog.atom.io/2017/09/12/announcing-atom-ide.html

** from https://github.com/Microsoft/vscode-go

DONE Colorization
DONE Completion Lists (using gocode)
SEMI Signature Help (using godoc)
Snippets
SEMI Quick Info (using godef)
DONE Goto Definition (using godef)
SEMI Find References (using go-find-references)
DONE File outline (using go-outline)
Workspace symbol search (using go-symbols)
Rename (using gorename)
Build-on-save (using go build and go test)
Format (using goreturns or goimports or gofmt)
Add Imports (using gopkgs)
[partially implemented] Debugging (using delve)

** have langserver.ml?
LSP? language server protocol?

(* LSP

https://microsoft.github.io/language-server-protocol/implementors/servers/
https://langserver.org/

https://github.com/freebroccolo/ocaml-language-server
 *)

* Pfff integration

** database_code integration!
project.el?

*** db_for_name automatic
fast enough?

*** take what is under the cursor as starting point?
hmm but need code database with shortname for ocaml code,
seems buggy right now

*** do that for Tex too?
create database_code for noweb file?

*** better find_in_file
what do I do in codemap?

*** project.ml
projects.ml ?

*** then fuzzy file finder
copy what I did in codemap and its fuzzy finder?

*** then fuzzy entity finder
copy what I did in codemap and its fuzzy finder
and otherwise have a fuzzy finder where put env and can see
list of stuff

*** completion
so when type Sys.tab then you can see if setenv, putenv, etc

maybe will have not that for fields, but then could cheat
and when use type the type of the struct then you get
some completions

** graph_code integration

*** colorize parameter, local, and globals for ml! check_variable_ml.ml!
will help for instance in cpp_mode.ml to better see the use of
mode that looks like a local or param but that is actually
a reference to a global constant in the file

** codemap integration?
have codemap->efuns integration, what could be efuns->codemap?
 
