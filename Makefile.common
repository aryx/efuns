# -*- makefile -*-

##############################################################################
# Prelude 
##############################################################################

# This file assumes the "includer" will have set a few variables and then do a
# include Makefile.common. Here are those variables:
#  - SRC
#  - INCLUDEDIRS

##############################################################################
# Generic variables
##############################################################################

INCLUDES?=$(INCLUDEDIRS:%=-I %) $(SYSINCLUDES)

OBJS?=    $(SRC:.ml=.cmo)
OPTOBJS?= $(SRC:.ml=.cmx)

##############################################################################
# Generic ocaml variables
##############################################################################

#-4  allow | _ patterns in match
#-6  allow omit labels
#-29 alow multiline strings
#-41 allow ambiguous constructor in 2 opened modules (TODO: fix them though)
#-44 allow shadow module identifier (TODO: fix them)
#-45 allow shadowing open (TODO: fix them though)
#-48 allow eliminating optional arguments, unclear how to fix without wide
#    changes
#TODO temporary
#  27: unused variables  
#  21: statement never returns (for olight)
#  31: dupe Map.cma and stdlib.cma(Map) 
#  3 deprecated (String.set, Bytes.set stuff)
#fixed: 32: dead code 21: ??
WARNING_FLAGS?=-w +A-3-4-6-29-41-44-45-48-27-21-31 -warn-error +a 

#dont use -custom, it makes the bytecode unportable.
OCAMLCFLAGS?=-g -dtypes -absname -bin-annot -thread $(WARNING_FLAGS)

# This flag is also used in subdirectories so don't change its name here.
OPTFLAGS?=-thread

OCAMLC=ocamlc$(OPTBIN) $(OCAMLCFLAGS)  $(INCLUDES)
OCAMLOPT=ocamlopt$(OPTBIN) $(OPTFLAGS) $(INCLUDES)
OCAMLLEX=ocamllex #-ml # -ml for debugging lexer, but slightly slower
OCAMLYACC=ocamlyacc -v
OCAMLDEP=ocamldep
OCAMLMKTOP=ocamlmktop -g -custom $(INCLUDES) -thread

# can also be set via 'make static'
STATIC= #-ccopt -static

# can also be unset via 'make purebytecode'
BYTECODE_STATIC=-custom

##############################################################################
# Top rules
##############################################################################

all::

##############################################################################
# Developer rules
##############################################################################

##############################################################################
# Generic ocaml rules
##############################################################################

.SUFFIXES: .ml .mli .cmo .cmi .cmx

.ml.cmo:
	$(OCAMLC)  -c $<
.mli.cmi:
	$(OCAMLC)  -c $<
.ml.cmx:
	$(OCAMLOPT)  -c $<

.ml.mldepend: 
	$(OCAMLC) -i $<

clean::
	rm -f *.cm[ioxa] *.[oa] *.cmxa *.annot *.cmt*
	rm -f *~ .*~ *.exe gmon.out #*#

distclean::
	rm -f .depend

beforedepend::

depend:: beforedepend
	$(OCAMLDEP) *.mli *.ml > .depend

-include .depend
